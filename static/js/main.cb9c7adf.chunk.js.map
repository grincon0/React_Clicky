{"version":3,"sources":["components/Container/index.js","components/Col/index.js","components/Card/index.js","components/Hero/index.js","components/Navbar/index.js","components/Row/index.js","components/Footer/index.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","react_default","a","createElement","Object","assign","className","concat","fluid","Col","size","split","map","join","children","Card","onClick","style","width","height","borderRadius","data-value","id","key","src","img","alt","Hero","NavBar","href","marginTop","color","float","score","high","Row","Footer","Main","state","points","highScore","gameOver","animals","Photos","clicked","handlePhotoClick","i","newState","objectSpread","_this","length","toggleIncorrect","setState","indexShuffle","push","arr","rnd","Math","floor","random","temp","elems","document","querySelectorAll","console","log","forEach","elem","classList","add","setTimeout","remove","_this2","this","cards","pic","components_Card","Navbar","components_Hero","components_Container","components_Row","margin","components_Col","components_Footer","Component","App","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb9c7adf.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nfunction Container(props){\r\n    return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props}/>;\r\n}\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\n\r\nfunction Col(props) {\r\n\r\n    const size = props.size.split(\" \").map(size => \"col\" + size).join(\" \");\r\n\r\n    return (<div className={size} {...props} >\r\n        {props.children}\r\n    </div>\r\n    \r\n    );\r\n\r\n}\r\n\r\nexport default Col;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\"card picHolder\" onClick={props.onClick}  {...props} style={{width: '19rem', height: '13rem'}}>\r\n            <img \r\n            style={{borderRadius: '4px',width: '18rem', height: '12rem'}} \r\n            className=\"card-img-top foxes\" \r\n            data-value={props.id}\r\n            key={props.id} \r\n            src={props.img} \r\n            alt=\"eeee\" />\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nfunction Hero(props) {\r\n    return (\r\n        <div className=\"hero text-center bgk\"{...props}>\r\n            <h1>React-Clickster</h1>\r\n            {props.children}\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Hero;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction NavBar(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg nav-back\">\r\n            \r\n                <ul className=\"navbar-nav full\">\r\n                    <li className=\"nav-item\">\r\n                        <a href=\"/\">Clickster</a>\r\n                    </li>\r\n                </ul>\r\n            \r\n            <div style={{width:'100%', marginTop: '15px'}} >\r\n                <p style={{color: 'white',float: 'right'}}>Score: {props.score} | High Score: {props.high} </p>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\n\r\nfunction Row(props){\r\n    return( <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props}>\r\n        {props.children}\r\n    </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Row;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer(){\r\n\r\n    return( <footer className=\"footer\" >\r\n        <span>React-Clickster 2019</span>\r\n    </footer>\r\n    \r\n    );\r\n    \r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport Container from \"../components/Container\";\r\nimport Col from \"../components/Col\";\r\nimport Card from \"../components/Card\"\r\nimport Hero from \"../components/Hero\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport Row from \"../components/Row\";\r\nimport Photos from \"../Photos.json\";\r\nimport Footer from \"../components/Footer\";\r\nimport \"./style.css\";\r\n\r\nclass Main extends Component {\r\n    state = {\r\n        points: 0,\r\n        highScore: 0,\r\n        gameOver: false,\r\n        animals: Photos,\r\n        clicked: []\r\n    }\r\n    indexShuffle(arr){\r\n        for(let i = 0; i < arr.length; i++){\r\n            let rnd = Math.floor(Math.random() * arr.length);\r\n            let temp = arr[i];\r\n            arr[i] = arr[rnd];\r\n            arr[rnd] = temp;\r\n        }\r\n        \r\n        return arr;\r\n\r\n    }\r\n    handlePhotoClick = (i) => {\r\n        const id = i;\r\n        let newState = {...this.state}\r\n        for(let i = 0; i < this.state.clicked.length; i++){\r\n            if(this.state.clicked[i] === id){\r\n                this.toggleIncorrect();\r\n                return this.setState({\r\n                    points: 0,\r\n                    gameOver: false,\r\n                    animals: this.indexShuffle(newState.animals),\r\n                    clicked: []\r\n                });\r\n            }\r\n        }\r\n        \r\n        newState.clicked.push(id);\r\n        newState.points++;\r\n\r\n        if(newState.highScore < newState.points){\r\n            newState.highScore = newState.points;\r\n        }\r\n        newState.animals = this.indexShuffle(newState.animals);\r\n\r\n        this.setState(newState);\r\n        \r\n\r\n     \r\n            \r\n       \r\n    }\r\n    toggleIncorrect(){\r\n        const elems = document.querySelectorAll('.foxes');\r\n        console.log('toggled');\r\n\r\n        elems.forEach( elem => {\r\n            elem.classList.add('wrong');\r\n        });\r\n\r\n        setTimeout(()=> {\r\n            elems.forEach( elem => {\r\n                elem.classList.remove('wrong');\r\n            });\r\n        }, 1050);\r\n    }\r\n    render() {\r\n        let animals = this.state.animals;\r\n        let cards = animals.map(pic => <Card onClick={() => this.handlePhotoClick(pic.id)} data-value={pic.id} key={pic.id} img={pic.src} alt=\"red-panda\" />);\r\n\r\n        return (\r\n            <div>\r\n                <Navbar score={this.state.points} high={this.state.highScore} />\r\n                <Hero />\r\n                <Container>\r\n                    <Row  style={{margin: \"5rem\"}}>\r\n                        <Col size=\"md-12\">\r\n                        {cards}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                <Footer />\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Main;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Main from './pages/Main'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n      <div>\n        <Route exact path=\"/\" component={Main} />\n      </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}